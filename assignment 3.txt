CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    city VARCHAR,
    state VARCHAR
);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    category VARCHAR,
    price NUMERIC,
    stock_quantity INTEGER
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    order_date TIMESTAMP
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER
);

INSERT INTO customers (city, state) VALUES
('Almaty', 'Almaty Region'),
('Astana', 'Akmola Region'),
('Shymkent', 'Turkestan Region');

INSERT INTO products (category, price, stock_quantity) VALUES
('Electronics', 150.00, 100),
('Clothing', 50.00, 200),
('Home Appliances', 300.00, 50);

INSERT INTO orders (customer_id, order_date) VALUES
(1, '2024-11-01 10:00:00'),
(2, '2024-11-02 15:30:00'),
(3, '2024-11-03 12:45:00');

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 3),
(2, 2, 1),
(2, 3, 1),
(3, 1, 1),
(3, 3, 2);

-- Query 1: Revenue Analysis by Category and State
SELECT
    p.category,
    c.state,
    SUM(p.price * oi.quantity) AS total_revenue
FROM
    orders o
JOIN
    customers c ON o.customer_id = c.customer_id
JOIN
    order_items oi ON o.order_id = oi.order_id
JOIN
    products p ON oi.product_id = p.product_id
GROUP BY
    p.category, c.state;

-- Query 2: Top Customer by Category
WITH customer_spend AS (
    SELECT
        c.customer_id,
        p.category,
        SUM(p.price * oi.quantity) AS total_spend
    FROM
        orders o
    JOIN
        customers c ON o.customer_id = c.customer_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    JOIN
        products p ON oi.product_id = p.product_id
    GROUP BY
        c.customer_id, p.category
)
SELECT
    category,
    customer_id,
    total_spend
FROM (
    SELECT
        category,
        customer_id,
        total_spend,
        RANK() OVER (PARTITION BY category ORDER BY total_spend DESC) AS rank
    FROM
        customer_spend
) AS ranked_spend
WHERE
    rank = 1;

-- Query 3: Rolling 7-Day Average Order Size
SELECT
    product_id,
    order_date,
    AVG(quantity) OVER (PARTITION BY product_id ORDER BY order_date RANGE BETWEEN INTERVAL '6 days' PRECEDING AND CURRENT ROW) AS rolling_7_day_avg
FROM (
    SELECT
        p.product_id,
        o.order_date,
        SUM(oi.quantity) AS quantity
    FROM
        orders o
    JOIN
        order_items oi ON o.order_id = oi.order_id
    JOIN
        products p ON oi.product_id = p.product_id
    GROUP BY
        p.product_id, o.order_date
) AS product_sales;
